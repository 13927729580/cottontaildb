package org.vitrivr.cottontail.database.queries.planning.nodes.logical.projection

import org.vitrivr.cottontail.database.column.ColumnDef
import org.vitrivr.cottontail.database.queries.OperatorNode
import org.vitrivr.cottontail.database.queries.planning.nodes.logical.UnaryLogicalOperatorNode
import org.vitrivr.cottontail.database.queries.planning.nodes.physical.projection.AggregatingProjectionPhysicalOperatorNode
import org.vitrivr.cottontail.database.queries.projection.Projection
import org.vitrivr.cottontail.model.basics.Name
import org.vitrivr.cottontail.model.exceptions.QueryException
import java.util.*

/**
 * A [UnaryLogicalOperatorNode] that represents a projection operation involving aggregate functions such as [Projection.MAX], [Projection.MIN] or [Projection.SUM].
 *
 * @author Ralph Gasser
 * @version 1.0.0
 */
class AggregatingProjectionLogicalOperatorNode(input: OperatorNode.Logical, val type: Projection, val fields: List<Pair<Name.ColumnName, Name.ColumnName?>>) : UnaryLogicalOperatorNode(input) {

    /** The [ColumnDef] generated by this [AggregatingProjectionLogicalOperatorNode]. */
    override val columns: Array<ColumnDef<*>>

    /** The [ColumnDef] required by this [AggregatingProjectionLogicalOperatorNode]. */
    override val requires: Array<ColumnDef<*>>

    init {
        /* Sanity check. */
        require(this.type in arrayOf(Projection.MIN, Projection.MAX, Projection.MAX, Projection.SUM)) {
            "Projection of type ${this.type} cannot be used with instances of AggregatingProjectionLogicalNodeExpression."
        }

        /* Calculate necessary fields. */
        val required = LinkedList<ColumnDef<*>>()
        val output = LinkedList<ColumnDef<*>>()
        for (f in this.fields) {
            val inColumn = input.columns.find { c -> c.name == f.first } ?: throw QueryException.QueryBindException("Column with name $f could not be found on input.")
            val outColumn = inColumn.copy(name = f.second ?: inColumn.name)
            if (!inColumn.type.numeric) throw QueryException.QueryBindException("Projection of type ${this.type} can only be applied to numeric column, which $inColumn isn't.")
            required.add(inColumn)
            output.add(outColumn)
        }
        this.requires = required.toTypedArray()
        this.columns = output.toTypedArray()
    }

    /**
     * Returns a copy of this [AggregatingProjectionLogicalOperatorNode] and its input.
     *
     * @return Copy of this [AggregatingProjectionLogicalOperatorNode] and its input.
     */
    override fun copyWithInputs() = AggregatingProjectionLogicalOperatorNode(this.input.copyWithInputs(), this.type, this.fields)

    /**
     * Returns a copy of this [SelectProjectionLogicalOperatorNode] and its output.
     *
     * @param input The [OperatorNode.Logical] that should act as inputs.
     * @return Copy of this [SelectProjectionLogicalOperatorNode] and its output.
     */
    override fun copyWithOutput(input: OperatorNode.Logical?): OperatorNode.Logical {
        require(input != null) { "Input is required for unary logical operator node." }
        val projection = AggregatingProjectionLogicalOperatorNode(input, this.type, this.fields)
        return (this.output?.copyWithOutput(projection) ?: projection)
    }

    /**
     * Returns a [AggregatingProjectionPhysicalOperatorNode] representation of this [AggregatingProjectionLogicalOperatorNode]
     *
     * @return [AggregatingProjectionPhysicalOperatorNode]
     */
    override fun implement(): Physical = AggregatingProjectionPhysicalOperatorNode(this.input.implement(), this.type, this.fields)

    /**
     * Compares this [AggregatingProjectionLogicalOperatorNode] to another object.
     *
     * @param other The other [Any] to compare this [AggregatingProjectionLogicalOperatorNode] to.
     * @return True if other equals this, false otherwise.
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is AggregatingProjectionLogicalOperatorNode) return false

        if (type != other.type) return false
        if (fields != other.fields) return false

        return true
    }

    /**
     * Generates and returns a hash code for this [AggregatingProjectionLogicalOperatorNode].
     */
    override fun hashCode(): Int {
        var result = this.type.hashCode()
        result = 31 * result + this.fields.hashCode()
        return result
    }
}