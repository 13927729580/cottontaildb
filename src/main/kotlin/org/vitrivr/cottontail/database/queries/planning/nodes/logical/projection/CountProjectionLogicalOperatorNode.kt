package org.vitrivr.cottontail.database.queries.planning.nodes.logical.projection

import org.vitrivr.cottontail.database.column.ColumnDef
import org.vitrivr.cottontail.database.queries.OperatorNode
import org.vitrivr.cottontail.database.queries.planning.nodes.logical.UnaryLogicalOperatorNode
import org.vitrivr.cottontail.database.queries.planning.nodes.physical.projection.CountProjectionPhysicalOperatorNode
import org.vitrivr.cottontail.database.queries.projection.Projection
import org.vitrivr.cottontail.model.basics.Name
import org.vitrivr.cottontail.model.basics.Type

/**
 * A [UnaryLogicalOperatorNode] that represents a projection operation involving aggregate functions such as [Projection.COUNT].
 *
 * @author Ralph Gasser
 * @version 1.0.0
 */
class CountProjectionLogicalOperatorNode(input: OperatorNode.Logical, val fields: List<Pair<Name.ColumnName, Name.ColumnName?>>) : UnaryLogicalOperatorNode(input) {

    /** The [Projection] represented by this [CountProjectionLogicalOperatorNode]. */
    val type: Projection = Projection.COUNT

    /** The [ColumnDef] generated by this [CountProjectionLogicalOperatorNode]. */
    override val columns: Array<ColumnDef<*>>

    /** The [ColumnDef] required by this [CountProjectionLogicalOperatorNode]. */
    override val requires: Array<ColumnDef<*>> = emptyArray()

    init {
        /* Calculate necessary fields. */
        val alias = this.fields.first().second
        val name = alias ?: (input.columns.first().name.entity()?.column(Projection.COUNT.label()) ?: Name.ColumnName(Projection.COUNT.label()))
        this.columns = arrayOf(ColumnDef(name, Type.Long, false))
    }

    /**
     * Returns a copy of this [CountProjectionLogicalOperatorNode] and its input.
     *
     * @return Copy of this [CountProjectionLogicalOperatorNode] and its input.
     */
    override fun copyWithInputs() = CountProjectionLogicalOperatorNode(this.input.copyWithInputs(), this.fields)

    /**
     * Returns a copy of this [CountProjectionLogicalOperatorNode] and its output.
     *
     * @param input The [OperatorNode.Logical] that should act as inputs.
     * @return Copy of this [CountProjectionLogicalOperatorNode] and its output.
     */
    override fun copyWithOutput(input: OperatorNode.Logical?): OperatorNode.Logical {
        require(input != null) { "Input is required for unary logical operator node." }
        val projection = CountProjectionLogicalOperatorNode(input, this.fields)
        return (this.output?.copyWithOutput(projection) ?: projection)
    }

    /**
     * Returns a [CountProjectionPhysicalOperatorNode] representation of this [CountProjectionLogicalOperatorNode]
     *
     * @return [CountProjectionPhysicalOperatorNode]
     */
    override fun implement(): Physical = CountProjectionPhysicalOperatorNode(this.input.implement(), this.fields)

    /**
     * Compares this [CountProjectionLogicalOperatorNode] to another object.
     *
     * @param other The other [Any] to compare this [CountProjectionLogicalOperatorNode] to.
     * @return True if other equals this, false otherwise.
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is CountProjectionLogicalOperatorNode) return false

        if (type != other.type) return false
        if (fields != other.fields) return false

        return true
    }

    /**
     * Generates and returns a hash code for this [CountProjectionLogicalOperatorNode].
     */
    override fun hashCode(): Int {
        var result = this.type.hashCode()
        result = 31 * result + this.fields.hashCode()
        return result
    }
}