package org.vitrivr.cottontail.database.queries.planning.nodes.logical.projection

import org.vitrivr.cottontail.database.column.ColumnDef
import org.vitrivr.cottontail.database.queries.OperatorNode
import org.vitrivr.cottontail.database.queries.planning.nodes.logical.UnaryLogicalOperatorNode
import org.vitrivr.cottontail.database.queries.planning.nodes.physical.projection.SelectProjectionPhysicalOperatorNode
import org.vitrivr.cottontail.database.queries.projection.Projection
import org.vitrivr.cottontail.model.basics.Name
import org.vitrivr.cottontail.model.exceptions.QueryException
import java.util.*

/**
 * A [UnaryLogicalOperatorNode] that represents a projection operation on a [org.vitrivr.cottontail.model.recordset.Recordset].
 *
 * @author Ralph Gasser
 * @version 1.0.0
 */
class SelectProjectionLogicalOperatorNode(input: OperatorNode.Logical, val fields: List<Pair<Name.ColumnName, Name.ColumnName?>>) : UnaryLogicalOperatorNode(input) {

    /** The type of [Projection] represented by this [SelectProjectionLogicalOperatorNode]. */
    val type: Projection = Projection.SELECT

    /** The [ColumnDef] generated by this [SelectProjectionLogicalOperatorNode]. */
    override val columns: Array<ColumnDef<*>>

    /** The [ColumnDef] required by this [SelectProjectionLogicalOperatorNode]. */
    override val requires: Array<ColumnDef<*>>

    init {
        /* Sanity check. */
        if (this.fields.isEmpty()) {
            throw QueryException.QuerySyntaxException("Projection of type $type must specify at least one column.")
        }

        /* Calculate necessary fields. */
        val required = LinkedList<ColumnDef<*>>()
        val output = LinkedList<ColumnDef<*>>()
        for (inColumn in this.input.columns) {
            val match = this.fields.find { f -> f.first.matches(inColumn.name) }
            if (match != null) {
                val alias = match.second
                val outColumn = if (alias != null) {
                    inColumn.copy(name = alias)
                } else {
                    inColumn
                }
                required.add(inColumn)
                output.add(outColumn)
            }
        }
        this.requires = required.toTypedArray()
        this.columns = output.toTypedArray()
    }

    /**
     * Returns a copy of this [SelectProjectionLogicalOperatorNode] and its input.
     *
     * @return Copy of this [SelectProjectionLogicalOperatorNode] and its input.
     */
    override fun copyWithInputs(): SelectProjectionLogicalOperatorNode = SelectProjectionLogicalOperatorNode(this.input.copyWithInputs(), this.fields)

    /**
     * Returns a copy of this [SelectProjectionLogicalOperatorNode] and its output.
     *
     * @param input The [OperatorNode.Logical] that should act as inputs.
     * @return Copy of this [SelectProjectionLogicalOperatorNode] and its output.
     */
    override fun copyWithOutput(input: OperatorNode.Logical?): OperatorNode.Logical {
        require(input != null) { "Input is required for unary logical operator node." }
        val projection = SelectProjectionLogicalOperatorNode(input, this.fields)
        return (this.output?.copyWithOutput(projection) ?: projection)
    }

    /**
     * Returns a [SelectProjectionPhysicalOperatorNode] representation of this [SelectProjectionLogicalOperatorNode]
     *
     * @return [SelectProjectionPhysicalOperatorNode]
     */
    override fun implement(): Physical = SelectProjectionPhysicalOperatorNode(this.input.implement(), this.type, this.fields)

    /**
     * Compares this [SelectProjectionLogicalOperatorNode] to another object.
     *
     * @param other The other [Any] to compare this [SelectProjectionLogicalOperatorNode] to.
     * @return True if other equals this, false otherwise.
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is SelectProjectionLogicalOperatorNode) return false

        if (type != other.type) return false
        if (fields != other.fields) return false

        return true
    }

    /**
     * Generates and returns a hash code for this [SelectProjectionLogicalOperatorNode].
     */
    override fun hashCode(): Int {
        var result = this.type.hashCode()
        result = 31 * result + this.fields.hashCode()
        return result
    }
}