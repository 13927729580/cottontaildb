package org.vitrivr.cottontail.database.queries.planning.nodes.physical.projection

import org.vitrivr.cottontail.database.column.ColumnDef
import org.vitrivr.cottontail.database.queries.OperatorNode
import org.vitrivr.cottontail.database.queries.QueryContext
import org.vitrivr.cottontail.database.queries.planning.cost.Cost
import org.vitrivr.cottontail.database.queries.planning.nodes.physical.UnaryPhysicalOperatorNode
import org.vitrivr.cottontail.database.queries.projection.Projection
import org.vitrivr.cottontail.execution.TransactionContext
import org.vitrivr.cottontail.execution.operators.projection.*
import org.vitrivr.cottontail.model.basics.Name
import org.vitrivr.cottontail.model.exceptions.QueryException
import java.util.*

/**
 * A [UnaryPhysicalOperatorNode] that represents a projection operation involving aggregate functions such as [Projection.MAX], [Projection.MIN] or [Projection.SUM].
 *
 * @author Ralph Gasser
 * @version 1.0.0
 */
class AggregatingProjectionPhysicalOperatorNode(input: OperatorNode.Physical, val type: Projection, val fields: List<Pair<Name.ColumnName, Name.ColumnName?>>) : UnaryPhysicalOperatorNode(input) {

    /** The [ColumnDef] generated by this [AggregatingProjectionPhysicalOperatorNode]. */
    override val columns: Array<ColumnDef<*>>

    /** The [ColumnDef] required by this [AggregatingProjectionPhysicalOperatorNode]. */
    override val requires: Array<ColumnDef<*>>

    /** The output size of this [AggregatingProjectionPhysicalOperatorNode] is always one. */
    override val outputSize: Long = 1

    /** The [Cost] of a [AggregatingProjectionPhysicalOperatorNode]. */
    override val cost: Cost = Cost(cpu = this.input.outputSize * (3 * Cost.COST_MEMORY_ACCESS + Cost.COST_FLOP))

    init {
        /* Sanity check. */
        require(this.type in arrayOf(Projection.MIN, Projection.MAX, Projection.MAX, Projection.SUM)) {
            "Projection of type ${this.type} cannot be used with instances of AggregatingProjectionLogicalNodeExpression."
        }

        /* Calculate necessary fields. */
        val required = LinkedList<ColumnDef<*>>()
        val output = LinkedList<ColumnDef<*>>()
        for (f in this.fields) {
            val inColumn = input.columns.find { c -> c.name == f.first } ?: throw QueryException.QueryBindException("Column with name $f could not be found on input.")
            val outColumn = inColumn.copy(name = f.second ?: inColumn.name)
            if (!inColumn.type.numeric) throw QueryException.QueryBindException("Projection of type ${this.type} can only be applied to numeric column, which $inColumn isn't.")
            required.add(inColumn)
            output.add(outColumn)
        }
        this.requires = required.toTypedArray()
        this.columns = output.toTypedArray()
    }

    /**
     * Returns a copy of this [CountProjectionPhysicalOperatorNode] and its input.
     *
     * @return Copy of this [CountProjectionPhysicalOperatorNode] and its input.
     */
    override fun copyWithInputs() = AggregatingProjectionPhysicalOperatorNode(this.input.copyWithInputs(), this.type, this.fields)

    /**
     * Returns a copy of this [CountProjectionPhysicalOperatorNode] and its output.
     *
     * @param input The [OperatorNode] that should act as inputs.
     * @return Copy of this [CountProjectionPhysicalOperatorNode] and its output.
     */
    override fun copyWithOutput(input: OperatorNode.Physical?): OperatorNode.Physical {
        require(input != null) { "Input is required for copyWithOutput() on unary physical operator node." }
        val projection = AggregatingProjectionPhysicalOperatorNode(input, this.type, this.fields)
        return (this.output?.copyWithOutput(projection) ?: projection)
    }

    /**
     * Partitions this [AggregatingProjectionPhysicalOperatorNode].
     *
     * @param p The number of partitions to create.
     * @return List of [OperatorNode.Physical], each representing a partition of the original tree.
     */
    override fun partition(p: Int): List<Physical> {
        throw UnsupportedOperationException("AggregatingProjectionPhysicalOperatorNode cannot be partitioned.")
    }

    /**
     * Converts this [CountProjectionPhysicalOperatorNode] to a [CountProjectionOperator].
     *
     * @param tx The [TransactionContext] used for execution.
     * @param ctx The [QueryContext] used for the conversion (e.g. late binding).
     */
    override fun toOperator(tx: TransactionContext, ctx: QueryContext) = when (this.type) {
        Projection.SUM -> SumProjectionOperator(this.input.toOperator(tx, ctx), this.fields)
        Projection.MAX -> MaxProjectionOperator(this.input.toOperator(tx, ctx), this.fields)
        Projection.MIN -> MinProjectionOperator(this.input.toOperator(tx, ctx), this.fields)
        Projection.MEAN -> MeanProjectionOperator(this.input.toOperator(tx, ctx), this.fields)
        else -> throw IllegalStateException("An AggregatingProjectionPhysicalOperatorNode requires a project of type SUM, MAX, MIN or MEAN but encountered ${this.type}.")
    }

    /**
     * Compares this [AggregatingProjectionPhysicalOperatorNode] to another object.
     *
     * @param other The other [Any] to compare this [AggregatingProjectionPhysicalOperatorNode] to.
     * @return True if other equals this, false otherwise.
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is AggregatingProjectionPhysicalOperatorNode) return false

        if (type != other.type) return false
        if (fields != other.fields) return false

        return true
    }

    /**
     * Generates and returns a hash code for this [AggregatingProjectionPhysicalOperatorNode].
     */
    override fun hashCode(): Int {
        var result = this.type.hashCode()
        result = 31 * result + this.fields.hashCode()
        return result
    }

    /** Generates and returns a [String] representation of this [AggregatingProjectionPhysicalOperatorNode]. */
    override fun toString() = "${this.groupId}:${this.type.label()}[${this.columns.joinToString(",") { it.name.toString() }}]"
}