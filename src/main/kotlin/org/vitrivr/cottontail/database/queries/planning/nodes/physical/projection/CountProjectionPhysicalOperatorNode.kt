package org.vitrivr.cottontail.database.queries.planning.nodes.physical.projection

import org.vitrivr.cottontail.database.column.ColumnDef
import org.vitrivr.cottontail.database.queries.OperatorNode
import org.vitrivr.cottontail.database.queries.QueryContext
import org.vitrivr.cottontail.database.queries.planning.cost.Cost
import org.vitrivr.cottontail.database.queries.planning.nodes.logical.projection.CountProjectionLogicalOperatorNode
import org.vitrivr.cottontail.database.queries.planning.nodes.physical.UnaryPhysicalOperatorNode
import org.vitrivr.cottontail.database.queries.projection.Projection
import org.vitrivr.cottontail.execution.TransactionContext
import org.vitrivr.cottontail.execution.operators.projection.CountProjectionOperator
import org.vitrivr.cottontail.model.basics.Name
import org.vitrivr.cottontail.model.basics.Type

/**
 * A [UnaryPhysicalOperatorNode] that represents a projection operation involving aggregate functions such as [Projection.COUNT].
 *
 * @author Ralph Gasser
 * @version 1.0.0
 */
class CountProjectionPhysicalOperatorNode(input: OperatorNode.Physical, val fields: List<Pair<Name.ColumnName, Name.ColumnName?>>) : UnaryPhysicalOperatorNode(input) {
    /** The [Projection] represented by this [CountProjectionLogicalOperatorNode]. */
    val type: Projection = Projection.COUNT

    /** The [ColumnDef] generated by this [CountProjectionLogicalOperatorNode]. */
    override val columns: Array<ColumnDef<*>>

    /** The [ColumnDef] required by this [CountProjectionLogicalOperatorNode]. */
    override val requires: Array<ColumnDef<*>> = emptyArray()

    /** The output size of this [CountProjectionPhysicalOperatorNode] is always one. */
    override val outputSize: Long = 1

    /** The [Cost] of a [CountProjectionPhysicalOperatorNode]. */
    override val cost: Cost = Cost(cpu = this.input.outputSize * Cost.COST_MEMORY_ACCESS)

    /**The [ExistsProjectionPhysicalOperatorNode] cannot be partitioned. */
    override val canBePartitioned: Boolean = false

    init {
        /* Calculate necessary fields. */
        val alias = this.fields.first().second
        val name = alias ?: (input.columns.first().name.entity()?.column(Projection.COUNT.label()) ?: Name.ColumnName(Projection.COUNT.label()))
        this.columns = arrayOf(ColumnDef(name, Type.Long, false))
    }

    /**
     * Returns a copy of this [CountProjectionPhysicalOperatorNode] and its input.
     *
     * @return Copy of this [CountProjectionPhysicalOperatorNode] and its input.
     */
    override fun copyWithInputs() = CountProjectionPhysicalOperatorNode(this.input.copyWithInputs(), this.fields)

    /**
     * Returns a copy of this [CountProjectionPhysicalOperatorNode] and its output.
     *
     * @param input The [OperatorNode] that should act as inputs.
     * @return Copy of this [CountProjectionPhysicalOperatorNode] and its output.
     */
    override fun copyWithOutput(input: OperatorNode.Physical?): OperatorNode.Physical {
        require(input != null) { "Input is required for copyWithOutput() on unary physical operator node." }
        val projection = CountProjectionPhysicalOperatorNode(input, this.fields)
        return (this.output?.copyWithOutput(projection) ?: projection)
    }

    /**
     * Partitions this [CountProjectionPhysicalOperatorNode].
     *
     * @param p The number of partitions to create.
     * @return List of [OperatorNode.Physical], each representing a partition of the original tree.
     */
    override fun partition(p: Int): List<Physical> {
        throw UnsupportedOperationException("CountProjectionPhysicalOperatorNode cannot be partitioned.")
    }

    /**
     * Converts this [CountProjectionPhysicalOperatorNode] to a [CountProjectionOperator].
     *
     * @param tx The [TransactionContext] used for execution.
     * @param ctx The [QueryContext] used for the conversion (e.g. late binding).
     */
    override fun toOperator(tx: TransactionContext, ctx: QueryContext) = CountProjectionOperator(this.input.toOperator(tx, ctx))

    /**
     * Compares this [CountProjectionPhysicalOperatorNode] to another object.
     *
     * @param other The other [Any] to compare this [CountProjectionPhysicalOperatorNode] to.
     * @return True if other equals this, false otherwise.
     */
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is CountProjectionPhysicalOperatorNode) return false
        if (type != other.type) return false
        if (fields != other.fields) return false
        return true
    }

    /**
     * Generates and returns a hash code for this [CountProjectionPhysicalOperatorNode].
     */
    override fun hashCode(): Int {
        var result = type.hashCode()
        result = 31 * result + fields.hashCode()
        return result
    }

    /** Generates and returns a [String] representation of this [CountProjectionPhysicalOperatorNode]. */
    override fun toString() = "${this.groupId}:Count[${this.columns.joinToString(",") { it.name.toString() }}]"
}