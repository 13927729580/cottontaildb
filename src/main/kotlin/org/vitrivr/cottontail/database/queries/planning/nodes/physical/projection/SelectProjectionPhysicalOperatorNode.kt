package org.vitrivr.cottontail.database.queries.planning.nodes.physical.projection

import org.vitrivr.cottontail.database.column.ColumnDef
import org.vitrivr.cottontail.database.queries.OperatorNode
import org.vitrivr.cottontail.database.queries.QueryContext
import org.vitrivr.cottontail.database.queries.planning.cost.Cost
import org.vitrivr.cottontail.database.queries.planning.nodes.physical.UnaryPhysicalOperatorNode
import org.vitrivr.cottontail.database.queries.projection.Projection
import org.vitrivr.cottontail.execution.TransactionContext
import org.vitrivr.cottontail.execution.operators.projection.SelectProjectionOperator
import org.vitrivr.cottontail.model.basics.Name
import org.vitrivr.cottontail.model.exceptions.QueryException
import java.util.*

/**
 * Formalizes a [UnaryPhysicalOperatorNode] operation in the Cottontail DB query execution engine.
 *
 * @author Ralph Gasser
 * @version 2.0.0
 */
class SelectProjectionPhysicalOperatorNode(input: OperatorNode.Physical, val type: Projection, val fields: List<Pair<Name.ColumnName, Name.ColumnName?>>) : UnaryPhysicalOperatorNode(input) {
    init {
        /* Sanity check. */
        if (this.fields.isEmpty()) {
            throw QueryException.QuerySyntaxException("Projection of type $type must specify at least one column.")
        }
    }

    /** The [ColumnDef] generated by this [SelectProjectionPhysicalOperatorNode]. */
    override val columns: Array<ColumnDef<*>>

    /** The [ColumnDef] required by this [SelectProjectionPhysicalOperatorNode]. */
    override val requires: Array<ColumnDef<*>>

    /** The output size of this [SelectProjectionPhysicalOperatorNode], which equals its input's output size. */
    override val outputSize: Long
        get() = this.input.outputSize

    /** The [Cost] of a [SelectProjectionPhysicalOperatorNode]. */
    override val cost: Cost = Cost(cpu = this.outputSize * this.fields.size * Cost.COST_MEMORY_ACCESS)

    init {
        /* Sanity check. */
        if (this.fields.isEmpty()) {
            throw QueryException.QuerySyntaxException("Projection of type $type must specify at least one column.")
        }

        /* Calculate necessary fields. */
        val required = LinkedList<ColumnDef<*>>()
        val output = LinkedList<ColumnDef<*>>()
        for (inColumn in this.input.columns) {
            val match = this.fields.find { f -> f.first.matches(inColumn.name) }
            if (match != null) {
                val alias = match.second
                val outColumn = if (alias != null) {
                    inColumn.copy(name = alias)
                } else {
                    inColumn
                }
                required.add(inColumn)
                output.add(outColumn)
            }
        }
        this.requires = required.toTypedArray()
        this.columns = output.toTypedArray()
    }

    /**
     * Returns a copy of this [SelectProjectionPhysicalOperatorNode] and its input.
     *
     * @return Copy of this [SelectProjectionPhysicalOperatorNode] and its input.
     */
    override fun copyWithInputs() = SelectProjectionPhysicalOperatorNode(this.input.copyWithInputs(), this.type, this.fields)

    /**
     * Returns a copy of this [SelectProjectionPhysicalOperatorNode] and its output.
     *
     * @param input The [OperatorNode] that should act as inputs.
     * @return Copy of this [SelectProjectionPhysicalOperatorNode] and its output.
     */
    override fun copyWithOutput(input: OperatorNode.Physical?): OperatorNode.Physical {
        require(input != null) { "Input is required for copyWithOutput() on unary physical operator node." }
        val projection = SelectProjectionPhysicalOperatorNode(input, this.type, this.fields)
        return (this.output?.copyWithOutput(projection) ?: projection)
    }

    /**
     * Partitions this [SelectProjectionPhysicalOperatorNode].
     *
     * @param p The number of partitions to create.
     * @return List of [OperatorNode.Physical], each representing a partition of the original tree.
     */
    override fun partition(p: Int): List<Physical> = this.input.partition(p).map { SelectProjectionPhysicalOperatorNode(it, this.type, this.fields) }

    /**
     * Converts this [SelectProjectionPhysicalOperatorNode] to a [SelectProjectionOperator].
     *
     * @param tx The [TransactionContext] used for execution.
     * @param ctx The [QueryContext] used for the conversion (e.g. late binding).
     */
    override fun toOperator(tx: TransactionContext, ctx: QueryContext) = SelectProjectionOperator(this.input.toOperator(tx, ctx), this.fields)

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is SelectProjectionPhysicalOperatorNode) return false

        if (type != other.type) return false
        if (fields != other.fields) return false

        return true
    }

    /**
     * Generates and returns a hash code for this [SelectProjectionPhysicalOperatorNode].
     */
    override fun hashCode(): Int {
        var result = type.hashCode()
        result = 31 * result + fields.hashCode()
        return result
    }

    /** Generates and returns a [String] representation of this [SelectProjectionPhysicalOperatorNode]. */
    override fun toString() = "${this.groupId}:Select[${this.columns.joinToString(",") { it.name.toString() }}]"
}